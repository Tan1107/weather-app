{"version":3,"sources":["components/SearchAppBar.js","components/CurrentWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchAppBar","props","onChange","e","console","log","target","value","setState","city","onSearch","state","key","getWeatherDataCity","AppBar","position","Toolbar","className","Typography","variant","noWrap","InputBase","placeholder","inputProps","this","onKeyDown","Component","moment","locale","CurrentWeather","current","currentWeather","imageUrl","weather","icon","main","src","name","unix","dt","format","temp","description","feels_like","humidity","pressure","wind","speed","App","getWeatherData","a","url","fetch","response","json","responseJson","weatherData","renderContent","Fragment","CircularProgress","cityName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAOqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,SAAW,SAACC,GACVC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CACZC,KAAMN,EAAEG,OAAOC,SAVA,EAanBG,SAAW,SAACP,GAAO,IACTM,EAAS,EAAKE,MAAdF,KACM,UAAVN,EAAES,KACJ,EAAKX,MAAMY,mBAAmBJ,IAdhC,EAAKE,MAAQ,CACXF,KAAM,IAHS,E,qDAoBjB,OACE,6BACE,kBAACK,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,UAAU,UACjB,kBAACC,EAAA,EAAD,CAAYD,UAAU,YAAYE,QAAQ,KAAKC,QAAM,GAArD,eAGA,yBAAKH,UAAU,gBACb,yBAAKA,UAAU,eAEf,kBAACI,EAAA,EAAD,CACEC,YAAY,eACZC,WAAY,CAAE,aAAc,UAC5BrB,SAAUsB,KAAKtB,SACfuB,UAAWD,KAAKd,mB,GAnCUgB,a,iBCJ1CC,IAAOC,S,IAEcC,E,uKAEjB,IAAMC,EAAUN,KAAKvB,MAAM8B,eAC3B3B,QAAQC,IAAIyB,GACZ,IAAME,EAAQ,2CAAuCF,EAAQG,QAAQ,GAAGC,KAA1D,WACd,GAA2B,oBAAhBJ,EAAQK,KACjB,OACE,yBAAKlB,UAAU,mBACb,yBAAKA,UAAU,aAAamB,IAAKJ,IACjC,yBAAKf,UAAU,eACb,4BAAKa,EAAQO,MACb,2BAAIV,IAAOW,KAAKR,EAAQS,IAAIC,OAAO,qBACnC,4BAAKV,EAAQK,KAAKM,KAAlB,UACA,4BAAKX,EAAQG,QAAQ,GAAGS,aACxB,gDAAcZ,EAAQK,KAAKQ,WAA3B,UACA,oDAAWb,EAAQK,KAAKS,SAAxB,MACA,+CAAad,EAAQK,KAAKU,UAC1B,4DAAgBf,EAAQgB,KAAKC,a,GAjBGrB,a,QCIvBsB,E,kDACnB,WAAY/C,GAAQ,IAAD,8BACjB,cAAMA,IAYRgD,eAbmB,uCAaF,WAAOxC,GAAP,mBAAAyC,EAAA,6DACTC,EADS,4DACkD1C,EADlD,iEAEQ2C,MAAMD,GAFd,cAETE,EAFS,gBAGYA,EAASC,OAHrB,OAGTC,EAHS,OAIf,EAAK/C,SAAS,CACZgD,YAAaD,IAEfnD,QAAQC,IAAIkD,GAPG,2CAbE,wDAuBnBE,cAAgB,WACd,OAAI,EAAK9C,MAAM6C,YAAYrB,KAEvB,kBAAC,IAAMuB,SAAP,KACE,kBAAC,EAAD,CAAgB3B,eAAgB,EAAKpB,MAAM6C,eAIxC,kBAACG,EAAA,EAAD,OA5BT,EAAKhD,MAAQ,CACX6C,YAAa,GACbI,SAAU,eALK,E,gEAUjBpC,KAAKyB,eAAezB,KAAKb,MAAMiD,Y,+BAyB/B,OACE,yBAAK3C,UAAU,YACb,kBAAC,EAAD,CAAcJ,mBAAoBW,KAAKyB,iBACtCzB,KAAKiC,qB,GAvCmB/B,aCGbmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1E,QAAQ0E,MAAMA,EAAMC,c","file":"static/js/main.f29fe9f0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\"\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nexport default class SearchAppBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: \"\",\r\n    };\r\n  }\r\n\r\n  onChange = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      city: e.target.value,\r\n    });\r\n  };\r\n  onSearch = (e) => {\r\n    const { city } = this.state;\r\n    if (e.key === \"Enter\") {\r\n      this.props.getWeatherDataCity(city);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div >\r\n        <AppBar position=\"static\">\r\n          <Toolbar className=\"navBar\">\r\n            <Typography className=\"titelName\" variant=\"h6\" noWrap>\r\n              Weather App\r\n            </Typography>\r\n            <div className=\"buttonSearch\">\r\n              <div className=\"searchIcon\">\r\n              </div>\r\n              <InputBase\r\n                placeholder=\"Search…\"\r\n                inputProps={{ \"aria-label\": \"search\" }}\r\n                onChange={this.onChange}\r\n                onKeyDown={this.onSearch}\r\n              />\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\"\r\nimport \"./styles.css\"\r\nmoment.locale()\r\n\r\nexport default class CurrentWeather extends Component {\r\n  render() {\r\n    const current = this.props.currentWeather;\r\n    console.log(current);\r\n    const imageUrl = `http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`;\r\n    if (typeof current.main != \"undefined\") {\r\n      return (\r\n        <div className=\"currentWheather\">\r\n          <img className=\"imgCurrent\" src={imageUrl} />\r\n          <div className=\"infoCurrent\">\r\n            <h1>{current.name}</h1>\r\n            <p>{moment.unix(current.dt).format('HH:mm DD/MM/YYYY')}</p>\r\n            <h1>{current.main.temp} °C</h1>\r\n            <h2>{current.weather[0].description}</h2>\r\n            <p>Cảm Giác: {current.main.feels_like} °C</p>\r\n            <p>Độ Ẩm: {current.main.humidity} %</p>\r\n            <p>Áp Suất: {current.main.pressure}</p>\r\n            <p>Tốc Độ Gió: {current.wind.speed}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport SearchAppBar from \"./components/SearchAppBar\"\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport \"./components/styles.css\"\n\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      weatherData: {},\n      cityName: \"Ho Chi Minh\",\n    };\n  }\n\n  componentDidMount() {\n    this.getWeatherData(this.state.cityName);\n  }\n\n  getWeatherData = async (city) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=4451f0cc1d6e5960079c7eb4634f7df8`;\n    const response = await fetch(url);\n    const responseJson = await response.json();\n    this.setState({\n      weatherData: responseJson,\n    });\n    console.log(responseJson);\n  };\n\n  renderContent = () => {\n    if (this.state.weatherData.main) {\n      return (\n        <React.Fragment>\n          <CurrentWeather currentWeather={this.state.weatherData} />\n        </React.Fragment>\n      );\n    } else {\n      return <CircularProgress />;\n    }\n  };\n  render() {\n    return (\n      <div className=\"wheather\">\n        <SearchAppBar getWeatherDataCity={this.getWeatherData} />\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}